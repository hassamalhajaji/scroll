abstractTableNode
 catchAllNodeType rowNode
 extends abstractScrollNode
 javascript
  _delimiter = " "
  get tableHeader() {
   const header = this.nodeAt(0)
   return header
    ? header
      .getLine()
      .split(this._delimiter)
      .map(word => `<th>${word}</th>\n`)
    : []
  }
  getTableBody(columnCount) {
   const delimiter = this._delimiter
   return this.getTopDownArray()
    .slice(1)
    .map(node => `<tr>${node.toRow(columnCount, delimiter)}</tr>`)
    .join("\n")
  }
  compile() {
   const tableHeader = this.tableHeader
   return `<table class="scrollTableComponent"><thead><tr>${tableHeader.join("\n")}</tr></thead>\n<tbody>${this.getTableBody(tableHeader.length)}</tbody></table>`
  }
commaTableNode
 crux commaTable
 description Comma separated values table.
 extends abstractTableNode
 javascript
  _delimiter = ","
pipeTableNode
 crux pipeTable
 description Pipie separated values table.
 extends abstractTableNode
 javascript
  _delimiter = "|"
tabTableNode
 crux tabTable
 description Tab separated values table.
 extends abstractTableNode
 javascript
  _delimiter = "\t"
spaceTableNode
 description Space separated values table. Last column is a catch all.
 extends abstractTableNode
 crux spaceTable
rowNode
 catchAllCellType textCell
 javascript
  toRow(columnCount, delimiter) {
   const words = this.getLine().split(delimiter)
   let str = ""
   let column = 0
   while (column < columnCount) {
    column++
    const content = columnCount === column ? words.slice(columnCount - 1).join(" ") : words[column - 1]
    str += `<td>${this.getRootNode().compileATags(content ?? "")}</td>\n`
   }
   return str
  }